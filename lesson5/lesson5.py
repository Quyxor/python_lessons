'''
Ввод и вывод, форматы данных

- стандартные потоки:
    0. stdin - стандартный поток ввода
        * input()
        * sys.stdin - байтовые строки
    1. stdout - стандартный поток вывода
        * print()
        * sys.stdout - байтовые строки
    2. stderr - стандартный поток ошибок
        * ошибки интерпритатора
        * sys.stderr - байтовые строки

- файловый ввод и вывод
    0. open(filename [, mode]) # [] - говорят о необязательности аргумента
        * открыть файл в режиме записи
            ~ w - открывает в режиме записи или создает файл или перезаписывает
            ~ a - дозаписывает файл или создает файл
            ~ x - эксклюзивное создание файла, если файл существует - error
        * открыть файл в режиме чтения
            ~ r          - режим по умолчанию
            ~ w+, a+, x+ - режим записи с возможностью чтения

- файлы бывают двух видов
    0. текстовые
    1. бинарные
        * b - бинарный режим => open('1.mp3', 'rb')
        * t - текстовый режим по умолчанию
        * U - универсальный режим переноса строк (устарел)
'''

#my_file = open('out.log', 'w')
#my_file.write(input('Введи текст уже, ну: ') + '\n')
#my_file.writelines(['AB\n', 'CD\n'])
my_file = open('out.log')
print('Прочитать файл в строку:\n{}'.format(
    my_file.read()
))

my_file.seek(0)

print('Прочитать файл в список:\n{}'.format(
    my_file.readlines()
))

my_file.seek(0)

print('Прочитать файл построчно:\n{}'.format(
    my_file.readline()
))

for line in my_file:
    print('ЧИТАЮ:\n{}'.format(line))

my_file.seek(0)

print('Прочитать из файла N байтов:\n{}'.format(
    my_file.read(3)
))

print('Получаю позицию курсора:\n{}'.format(
    my_file.tell()
))

my_file.close()

# контекстный менеджер
with open('out.log') as my_file:
    print('WITH:\n{}'.format(my_file.read()))
